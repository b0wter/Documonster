namespace b0wter.DocuMonster.BsaSearch

module SampleText =

    open System

    let n = Environment.NewLine

    let p1 = "What's so special about this pseudo-random number generator?" + n +
             "This carefully designed PRNG utilizes more than 1536 bits of internal “state” memory. The operating parameters of the generator's algorithm were carefully chosen (it uses a “safe prime” factor) to guarantee that every possible PRNG “state” is visited before the sequence begins to repeat. The result is that the “period” of this generator will be the “Germain prime” 1,768,863 x 21535 - 1, which is approximately 2.132 x 10468. This is such a large number that it might as well be infinite. This generator effectively never repeats." + n +
             "For our purposes, a “SeedKey” (such as the one above) is used to initialize the PRNG to a pseudo-randomly chosen point in this incredibly large loop of unpredictable pseudo-random numbers, from which we then pull as many pseudo-random values as we need. The 256-character “SeedKey” uses the 94 printable ASCII characters (spaces are ignored). Therefore, this yields 94256 possible seedkeys. This is 1.32 x 10505 possible strings, which is equivalent to 1,678 bits of entropy. Since this is greater than the total entropic state of the UHEPRNG, a SeedKey of this length and complexity is sufficient (and necessary) to fully initialize a PRNG of this complexity."
             
    let p2 = "Anything else?" + n +
             "As a matter of fact, yes: Not only is it an extremely good pseudo-random number generator, it is also extremely fast. This makes its use with slow processors, or under interpreted languages (such as its implementation language, JavaScript) much more practical than many other much weaker PRNGs."
             
    let p3 = "Why was this fancy PRNG developed?" + n +
             "Our “Off The Grid” (OTG) website password generation system is based upon Latin Squares. Latin Squares are ‘n’x‘n’ grids containing exactly one of each of ‘n’ symbols in every horizontal row and vertical column. Brute force guessing of the OTG system's grids is made effectively impossible by the large number of possible 26x26 Latin Squares. This remains true even when many pieces of a user's Latin Square have become known to an attacker due to the phenomenal number of Squares that are still possible containing what is known." + n +
             "Although mathematicians have been unable to determine how many different 26x26 Squares can be created, they have been able to determine that the number is at least 9.337 x 10426, or approximately 21418. This is an incredibly large number. But for our purposes it is only meaningful if any of those many possible Latin Squares could potentially be generated by our OTG grid generator. If we were to use any traditional PRNG, even something state-of-the-art such as Fortuna, based upon a cryptographic symmetric cipher or a hash, we would be limited to generating Latin Squares from such a generator's much lower level of entropy . . . on the order of 256 or 384 bits. This would be more than sufficient for many cryptographic applications, but not for ours. Since 26x26 Latin Squares are known to have a potential entropy of at least 1418 bits, we needed a PRNG that could keep up. So an “ultra-high entropy” PRNG, having an entropy of 1536 bits, was developed to allow access to all possible Latin Squares."
             
    let pp = [ p1; p2; p3 ]
    
    let all = String.Join(Environment.NewLine, pp)